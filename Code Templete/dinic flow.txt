// Network flow (Dinic's algorithm)
//
// Given a directed weighted graph, source, and sink, computes the maximum flow
// from source to sink.
//
// To use, call init(n), then add edges using edge(x, y, c1, c2), and finally
// call run(src, sink).
//
// Functions:
// - init(n) initializes the algorithm with the given number of nodes
// - edge(x, y, c1, c2) adds edges x->y of capacity c1 and y->x of capacity c2
// - run(src, sink) runs the algorithm and returns the total flow
//
// Time complexity: O(V^2 * E)
//
// Constants to configure:
// - MAXV is the maximum number of vertices
// - MAXE is the maximum number of edges (i.e. twice the calls to function edge)
// - oo is the "infinity" value

const int MAXV = 1000100;
const int MAXE = 1000100;
const LL oo = 1e18;

int V, E;
int last[MAXV], dist[MAXV], curr[MAXV];
int nxt[MAXE], adj[MAXE];
LL cap[MAXE];

void init(int n)
{
    V = n;
    E = 0;
    REP(i, V) last[i] = -1;
}

void edge(int x, int y, LL c1, LL c2)
{
    adj[E] = y;
    cap[E] = c1;
    nxt[E] = last[x];
    last[x] = E++;
    adj[E] = x;
    cap[E] = c2;
    nxt[E] = last[y];
    last[y] = E++;
}

LL push(int x, int sink, LL flow)
{
    if (x == sink) return flow;

    for (int &e = curr[x]; e != -1; e = nxt[e])
    {
        int y = adj[e];

        if (cap[e] && dist[x] + 1 == dist[y])
            if (LL f = push(y, sink, min(flow, cap[e])))
                return cap[e] -= f, cap[e^1] += f, f;
    }
    return 0;
}

LL run(int src, int sink)
{
    LL ret = 0;
    for (;;)
    {
        REP(i, V) curr[i] = last[i];
        REP(i, V) dist[i] = -1;

        queue<int> Q;
        Q.push(src), dist[src] = 0;

        while (!Q.empty())
        {
            int x = Q.front();
            Q.pop();

            for (int e = last[x]; e != -1; e = nxt[e])
            {
                int y = adj[e];
                if (cap[e] && dist[y] == -1) Q.push(y), dist[y] = dist[x] + 1;
            }
        }
        if (dist[sink] == -1) break;

        while (LL f = push(src, sink, oo)) ret += f;
    }
    return ret;
}
